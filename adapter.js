// Generated by CoffeeScript 1.4.0
var SOCKET, TYPES;

window.Models = {};

SOCKET = "/";

TYPES = {
  CREATE: "CREATE",
  CREATES: "CREATES",
  UPDATE: "UPDATE",
  UPDATES: "UPDATES",
  DELETE: "DELETE",
  DELETES: "DELETES",
  FIND: "FIND",
  FIND_MANY: "FIND_MANY",
  FIND_QUERY: "FIND_QUERY",
  FIND_ALL: "FIND_ALL"
};

DS.SocketAdapter = DS.RESTAdapter.extend({
  socket: undefined,
  requests: undefined,
  generateUuid: function() {
    var S4;
    S4 = function() {
      return Math.floor(Math.random() * 0x10000).toString(16);
    };
    return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
  },
  send: function(request) {
    var data;
    request.uuid = this.generateUuid();
    request.context = this;
    this.get("requests")[request.uuid] = request;
    data = {
      uuid: request.uuid,
      action: request.requestType,
      type: this.rootForType(request.type)
    };
    if (request.record !== undefined) {
      data.record = this.serialize(request.record, {
        includeId: true
      });
    }
    return this.socket.emit("ember-data", data);
  },
  find: function(store, type, id) {
    return this.send({
      store: store,
      type: type,
      id: id,
      requestType: TYPES.FIND,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didFindRecord(req.store, req.type, res, req.id);
        });
      }
    });
  },
  findMany: function(store, type, ids, query) {
    return this.send({
      store: store,
      type: type,
      ids: ids,
      query: query,
      requestType: TYPES.FIND_MANY,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didFindMany(req.store, req.type, res);
        });
      }
    });
  },
  findQuery: function(store, type, query, recordArray) {
    return this.send({
      store: store,
      type: type,
      query: query,
      recordArray: recordArray,
      requestType: TYPES.FIND_QUERY,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didFindQuery(req.store, req.type, res, req.recordArray);
        });
      }
    });
  },
  findAll: function(store, type, since) {
    return this.send({
      store: store,
      type: type,
      since: this.sinceQuery(since),
      requestType: TYPES.FIND_ALL,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didFindAll(req.store, req.type, res);
        });
      }
    });
  },
  createRecord: function(store, type, record) {
    return this.send({
      store: store,
      type: type,
      record: record,
      requestType: TYPES.CREATE,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didCreateRecord(req.store, req.type, req.record, res);
        });
      }
    });
  },
  createRecords: function(store, type, records) {
    return this._super(store, type, records);
  },
  updateRecord: function(store, type, record) {
    return this.send({
      store: store,
      type: type,
      record: record,
      requestType: TYPES.UPDATE,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didSaveRecord(req.store, req.type, req.record, res);
        });
      }
    });
  },
  updateRecords: function(store, type, records) {
    return this._super(store, type, records);
  },
  deleteRecord: function(store, type, record) {
    return this.send({
      store: store,
      type: type,
      record: record,
      requestType: TYPES.DELETE,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didSaveRecord(req.store, req.type, req.record, res);
        });
      }
    });
  },
  deleteRecords: function(store, type, records) {
    return this._super(store, type, records);
  },
  init: function() {
    var context, ws;
    this._super();
    context = this;
    this.set("requests", {});
    ws = io.connect("//" + location.host);
    ws.on("ember-data", function(payload) {
      var request, uuid;
      uuid = payload.uuid;
      request = context.get("requests")[uuid];
      request.callback(request, payload.data);
      return context.get("requests")[uuid] = undefined;
    });
    ws.on("disconnect", function() {});
    return this.set("socket", ws);
  }
});

App.store = DS.Store.create({
  revision: 11,
  adapter: DS.SocketAdapter.create({})
});

DS.Model.reopen({
  save: function() {
    App.store.commit();
    return this;
  }
});
