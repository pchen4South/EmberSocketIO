// Generated by CoffeeScript 1.4.0
var SOCKET, TYPES;

window.App = Ember.Application.create();

App.Box = DS.Model.extend({
  height: DS.attr('number'),
  width: DS.attr('number'),
  left: DS.attr('number'),
  top: DS.attr('number'),
  text: DS.attr('string'),
  selected: DS.attr('boolean')
}, {
  defaultValue: false
});

App.Router.map(function() {
  return this.resource("boxs", function() {
    return this.resource("box", {
      path: ':box_id'
    });
  });
});

App.IndexRoute = Em.Route.extend({
  redirect: function() {
    return this.replaceWith('boxs');
  }
});

App.BoxsRoute = Em.Route.extend({
  model: function() {
    return App.Box.find();
  },
  setupController: function(controller, model) {
    controller.set('content', model);
    return this._super();
  }
});

App.BoxsController = Em.ArrayController.extend({
  content: [],
  selBox: null,
  addBox: function() {
    var newBox;
    newBox = App.Box.createRecord({
      text: 'newBox',
      height: 200,
      width: 200
    });
    return newBox.save();
  },
  selectBox: function(box) {
    var obj, _i, _len, _ref;
    _ref = this.get('content').toArray();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      obj.set('selected', false);
    }
    box.set('selected', true);
    return this.set('selBox', box);
  },
  delBox: function(box) {
    box.deleteRecord();
    return box.save();
  },
  saveText: function() {
    return App.store.commit();
  }
});

App.BoxView = Em.View.extend({
  templateName: 'box',
  tagName: 'div',
  classNames: ['box'],
  classNameBindings: ['selected'],
  attributeBindings: ['style'],
  controllerBinding: App.BoxController,
  selected: (function() {
    return this.get('content.selected');
  }).property('content.selected'),
  click: function(event) {
    console.log(this.get('controller'));
    window.box = this.get('content');
    return this.get('controller').selectBox(this.get('content'));
  },
  style: (function() {
    var height, heightString, left, leftString, top, topString, width, widthString;
    height = this.get('content.height');
    width = this.get('content.width');
    top = this.get('content.top');
    left = this.get('content.left');
    heightString = "height:" + height + "px;";
    widthString = "width:" + width + "px;";
    topString = "top:" + top + "px;";
    leftString = "left:" + left + "px;";
    return heightString + widthString + topString + leftString;
  }).property('content.height', 'content.width', 'content.top', 'content.left').cacheable()
});

window.Models = {};

SOCKET = "/";

TYPES = {
  CREATE: "CREATE",
  CREATES: "CREATES",
  UPDATE: "UPDATE",
  UPDATES: "UPDATES",
  DELETE: "DELETE",
  DELETES: "DELETES",
  FIND: "FIND",
  FIND_MANY: "FIND_MANY",
  FIND_QUERY: "FIND_QUERY",
  FIND_ALL: "FIND_ALL"
};

DS.SocketAdapter = DS.RESTAdapter.extend({
  socket: void 0,
  requests: void 0,
  generateUuid: function() {
    var S4;
    S4 = function() {
      return Math.floor(Math.random() * 0x10000).toString(16);
    };
    return S4() + S4();
  },
  send: function(request) {
    var data;
    request.uuid = this.generateUuid();
    request.context = this;
    this.get("requests")[request.uuid] = request;
    data = {
      uuid: request.uuid,
      action: request.requestType,
      type: this.rootForType(request.type)
    };
    if (request.record !== void 0) {
      data.record = this.serialize(request.record, {
        includeId: true
      });
    }
    if (request.id !== void 0) {
      data.id = request.id;
    }
    if (request.query !== void 0) {
      data.query = request.query;
    }
    if (request.ids !== void 0) {
      data.ids = request.ids;
    }
    return this.socket.emit("ember-data", data);
  },
  find: function(store, type, id) {
    return this.send({
      store: store,
      type: type,
      id: id,
      requestType: TYPES.FIND,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didFindRecord(req.store, req.type, res, req.id);
        });
      }
    });
  },
  findAll: function(store, type, since) {
    return this.send({
      store: store,
      type: type,
      since: this.sinceQuery(since),
      requestType: TYPES.FIND_ALL,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didFindAll(req.store, req.type, res);
        });
      }
    });
  },
  createRecord: function(store, type, record) {
    return this.send({
      store: store,
      type: type,
      record: record,
      requestType: TYPES.CREATE,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didCreateRecord(req.store, req.type, req.record, res);
        });
      }
    });
  },
  updateRecord: function(store, type, record) {
    return this.send({
      store: store,
      type: type,
      record: record,
      requestType: TYPES.UPDATE,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didSaveRecord(req.store, req.type, req.record, res);
        });
      }
    });
  },
  deleteRecord: function(store, type, record) {
    return this.send({
      store: store,
      type: type,
      record: record,
      requestType: TYPES.DELETE,
      callback: function(req, res) {
        return Ember.run(req.context, function() {
          return this.didSaveRecord(req.store, req.type, req.record);
        });
      }
    });
  },
  init: function() {
    var context, ws;
    this._super();
    context = this;
    this.set("requests", {});
    ws = io.connect("//" + location.host);
    window.reqs = this.get('requests');
    ws.on("ember-data", function(payload) {
      var request, uuid;
      uuid = payload.uuid;
      request = context.get("requests")[uuid];
      if (payload.data) {
        return request.callback(request, payload.data);
      }
    });
    ws.on("delete", function(payload) {
      var box, boxId;
      boxId = payload.data['box'].id;
      box = App.store.find(App.Box, boxId);
      return App.store.unloadRecord(box);
    });
    ws.on("create", function(payload) {
      window.pay = payload;
      return App.store.load(App.Box, payload.data[payload.type]);
    });
    ws.on("update", function(payload) {
      return App.store.load(App.Box, payload.data[payload.type]);
    });
    ws.on("disconnect", function() {});
    return this.set("socket", ws);
  }
});

DS.SocketAdapter.map('App.Box', {
  box: {
    key: 'boxs'
  }
});

App.store = DS.Store.create({
  revision: 11,
  adapter: DS.SocketAdapter.create()
});

DS.Model.reopen({
  save: function() {
    App.store.commit();
    return this;
  }
});
