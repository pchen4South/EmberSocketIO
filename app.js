// Generated by CoffeeScript 1.4.0
"use strict";
var CREATE, CREATE_Callback, DELETE, DELETE_Callback, FIND, FIND_ALL, FIND_ALL_Callback, FIND_Callback, ObjectId, TYPES, UPDATE, UPDATE_Callback, app, callbackHelper, capitalize, colors, databaseResponseCleanup, dbCallBack, express, formatResponse, http, io, models, path, server;

express = require("express");

http = require("http");

path = require("path");

colors = require("colors");

models = require("./models/models");

ObjectId = require('mongoose').Types.ObjectId;

app = express();

app.configure(function() {
  app.set("port", 80);
  app.use(express.favicon());
  app.use(express.logger("dev"));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express["static"](__dirname + "/public"));
  return app.use(express["static"](__dirname));
});

app.configure("development", function() {
  return app.use(express.errorHandler());
});

app.get("/", function(req, res) {
  return res.sendfile(__dirname + "/index.html");
});

server = app.listen(app.get("port"), function() {
  var msg;
  msg = "Express server listening on port " + app.get("port");
  return console.log(msg.bold.cyan);
});

io = require("socket.io").listen(server);

TYPES = {
  CREATE: "CREATE",
  CREATES: "CREATES",
  UPDATE: "UPDATE",
  UPDATES: "UPDATES",
  DELETE: "DELETE",
  DELETES: "DELETES",
  FIND: "FIND",
  FIND_MANY: "FIND_MANY",
  FIND_QUERY: "FIND_QUERY",
  FIND_ALL: "FIND_ALL"
};

io.sockets.on("connection", function(socket) {
  return socket.on("ember-data", function(data) {
    var payload;
    if (data.record !== undefined) {
      data.data = [data.record];
    }
    payload = {};
    switch (data.action) {
      case TYPES.CREATE:
        return CREATE(data, socket, CREATE_Callback);
      case TYPES.UPDATE:
        return UPDATE(data, socket, UPDATE_Callback);
      case TYPES.DELETE:
        return DELETE(data, socket, DELETE_Callback);
      case TYPES.FIND_ALL:
        return FIND_ALL(data, socket, FIND_ALL_Callback);
      case TYPES.FIND:
        return FIND(data, socket, FIND_CallBack);
      default:
        throw "Unknown action " + data.action;
    }
  });
});

CREATE = function(data, socket, callback) {
  return models[capitalize(data.type)].create(data.record, function(err, results) {
    return dbCallBack(err, results, callback, socket, data);
  });
};

UPDATE = function(data, socket, callback) {
  return models[capitalize(data.type)].findOneAndUpdate({
    _id: data.record.id
  }, {
    $set: data.record
  }, function(err, results) {
    return dbCallBack(err, results, callback, socket, data);
  });
};

DELETE = function(data, socket, callback) {
  return models[capitalize(data.type)].findOneAndRemove({
    _id: data.record.id
  }, function(err, results) {
    return callback(data, socket, results);
  });
};

FIND_ALL = function(data, socket, callback) {
  return models[capitalize(data.type)].find({}, function(err, results) {
    return dbCallBack(err, results, callback, socket, data);
  });
};

FIND = function(data, socket, callback) {
  return models[capitalize(data.type)].findById({
    _id: ObjectId.fromString(data.id)
  }, function(err, results) {
    return dbCallBack(err, results, callback, socket, data);
  });
};

FIND_ALL_Callback = function(data, socket, models) {
  var eachResult, i, payload, response, results;
  payload = {};
  results = models;
  i = 0;
  while (i < results.length) {
    eachResult = results[i].toObject({
      transform: databaseResponseCleanup
    });
    results[i] = eachResult;
    i++;
  }
  payload[data.type + "s"] = results;
  response = formatResponse(data, payload);
  return socket.emit("ember-data", response);
};

CREATE_Callback = function(data, socket, model) {
  var response;
  response = callbackHelper(data, socket, model);
  return socket.broadcast.emit("create", response);
};

UPDATE_Callback = function(data, socket, model) {
  var response;
  response = callbackHelper(data, socket, model);
  return socket.broadcast.emit("update", response);
};

DELETE_Callback = function(data, socket, model) {
  var response;
  response = callbackHelper(data, socket, model);
  return socket.broadcast.emit("delete", response);
};

FIND_Callback = function(data, socket, model) {
  var response;
  if (model) {
    response = callbackHelper(data, socket, model);
    return socket.emit("ember-data", response);
  } else {
    return socket.emit("ember-data", "model not found");
  }
};

capitalize = function(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

dbCallBack = function(err, results, callback, socket, data) {
  if (err) {
    console.log(err);
  } else {
    callback(data, socket, results);
  }
  return false;
};

formatResponse = function(data, results) {
  var response;
  return response = {
    uuid: data.uuid,
    action: data.action,
    type: data.type,
    data: results
  };
};

databaseResponseCleanup = function(doc, ret, options) {
  delete ret.__v;
  ret.id = ret._id;
  delete ret._id;
  return ret;
};

callbackHelper = function(data, socket, model) {
  var payload, response, results;
  payload = {};
  results = model;
  payload[data.type] = model.toObject({
    transform: databaseResponseCleanup
  });
  response = formatResponse(data, payload);
  socket.emit("ember-data", response);
  return response;
};
